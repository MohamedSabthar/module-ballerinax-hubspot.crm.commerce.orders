// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

listener http:Listener ep0 = new (8080, config = {host: "localhost"});

service / on ep0 {
    // # Archive
    // #
    // # + return - returns can be any of following types 
    // # http:NoContent (No content)
    // # http:DefaultStatusCodeResponse (An error occurred.)
    // resource function delete crm/v3/objects/orders/[string orderId]() returns http:NoContent|AnydataDefault {
    //     // Simulate a case where the resource doesn't exist
    //     if !(int:fromString(orderId) is int){
    //         return {
    //             status: new (400), //Bad Request
    //             headers: { "Content-Type": "application/json" }, // Optional headers
    //             body: { "message": "Invalid order ID format", "id": orderId }
    //         };
    //     }
    //     // Simulate deletion logic
    //     boolean isDeleted = true; // Assume this function deletes the order and returns true/false.
    //     if isDeleted {
    //         return http:NO_CONTENT; // Successfully deleted, no content to return.
    //     } else {
    //         return {
    //             status: new(404), // Not Found
    //             headers: { "Content-Type": "application/json" },
    //             body: { "message": "Order not found", "id": orderId }
    //         };
    //     }      
    // }

    // # List
    // #
    // # + 'limit - The maximum number of results to display per page.
    // # + after - The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
    // # + properties - A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
    // # + propertiesWithHistory - A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.
    // # + associations - A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
    // # + archived - Whether to return only results that have been archived.
    // # + return - returns can be any of following types 
    // # http:Ok (successful operation)
    // # http:DefaultStatusCodeResponse (An error occurred.)
    // resource function get crm/v3/objects/orders(string? after, string[]? properties, string[]? propertiesWithHistory, string[]? associations, int:Signed32 'limit = 10, boolean archived = false) returns CollectionResponseSimplePublicObjectWithAssociationsForwardPaging|AnydataDefault {
    //     CollectionResponseAssociatedId id ={
    //         paging: {
    //             next: {
    //                 link: "",
    //                 after: after ?: ""
    //             },
    //             prev: {
    //                 before: "",
    //                 link: ""
    //             }
    //         },
    //         results: [
    //             {
    //                 id:"",
    //                 'type: ""
    //             }
    //         ]
    //     };
        
    //     SimplePublicObjectWithAssociations obj = {
    //         associations:id,
    //                 createdAt:"s",
    //                 archived:archived,
    //                 archivedAt:"d",
    //                 propertiesWithHistory:propertiesWithHistory,
    //                 id:"22",
    //                 properties:properties,
    //                 updatedAt:"dd"
    //     };
    //     return {
    //         paging: {},
    //         results: [
    //             obj
    //         ]
    //     };
    // }

    // ,
    //         results: [
    //             
    //         ]

    // # Read
    // #
    // # + properties - A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
    // # + propertiesWithHistory - A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.
    // # + associations - A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
    // # + archived - Whether to return only results that have been archived.
    // # + idProperty - The name of a property whose values are unique for this object type
    // # + return - returns can be any of following types 
    // # http:Ok (successful operation)
    // # http:DefaultStatusCodeResponse (An error occurred.)
    // resource function get crm/v3/objects/orders/[string orderId](string[]? properties, string[]? propertiesWithHistory, string[]? associations, string? idProperty, boolean archived = false) returns SimplePublicObjectWithAssociations|AnydataDefault {
    // }

    // # Update
    // #
    // # + idProperty - The name of a property whose values are unique for this object type
    // # + return - returns can be any of following types 
    // # http:Ok (successful operation)
    // # http:DefaultStatusCodeResponse (An error occurred.)
    // resource function patch crm/v3/objects/orders/[string orderId](string? idProperty, @http:Payload SimplePublicObjectInput payload) returns SimplePublicObject|AnydataDefault {
    // }

    // # Create
    // #
    // # + return - returns can be any of following types 
    // # http:Created (successful operation)
    // # http:DefaultStatusCodeResponse (An error occurred.)
    // resource function post crm/v3/objects/orders(@http:Payload SimplePublicObjectInputForCreate payload) returns SimplePublicObject|AnydataDefault {
    // }

    // # Archive a batch of orders by ID
    // #
    // # + return - returns can be any of following types 
    // # http:NoContent (No content)
    // # http:DefaultStatusCodeResponse (An error occurred.)
    // resource function post crm/v3/objects/orders/batch/archive(@http:Payload BatchInputSimplePublicObjectId payload) returns http:NoContent|AnydataDefault {
    // }

    // # Create a batch of orders
    // #
    // # + return - returns can be any of following types 
    // # http:Created (successful operation)
    // # http:MultiStatus (multiple statuses)
    // # http:DefaultStatusCodeResponse (An error occurred.)
    // resource function post crm/v3/objects/orders/batch/create(@http:Payload BatchInputSimplePublicObjectInputForCreate payload) returns BatchResponseSimplePublicObject|BatchResponseSimplePublicObjectWithErrorsMultiStatus|AnydataDefault {
    // }

    // # Read a batch of orders by internal ID, or unique property values
    // #
    // # + archived - Whether to return only results that have been archived.
    // # + return - returns can be any of following types 
    // # http:Ok (successful operation)
    // # http:MultiStatus (multiple statuses)
    // # http:DefaultStatusCodeResponse (An error occurred.)
    // resource function post crm/v3/objects/orders/batch/read(@http:Payload BatchReadInputSimplePublicObjectId payload, boolean archived = false) returns BatchResponseSimplePublicObjectOk|BatchResponseSimplePublicObjectWithErrorsMultiStatus|AnydataDefault {
    // }

    // # Update a batch of orders
    // #
    // # + return - returns can be any of following types 
    // # http:Ok (successful operation)
    // # http:MultiStatus (multiple statuses)
    // # http:DefaultStatusCodeResponse (An error occurred.)
    // resource function post crm/v3/objects/orders/batch/update(@http:Payload BatchInputSimplePublicObjectBatchInput payload) returns BatchResponseSimplePublicObjectOk|BatchResponseSimplePublicObjectWithErrorsMultiStatus|AnydataDefault {
    // }

    // # Create or update a batch of orders by unique property values
    // #
    // # + return - returns can be any of following types 
    // # http:Ok (successful operation)
    // # http:MultiStatus (multiple statuses)
    // # http:DefaultStatusCodeResponse (An error occurred.)
    // resource function post crm/v3/objects/orders/batch/upsert(@http:Payload BatchInputSimplePublicObjectBatchInputUpsert payload) returns BatchResponseSimplePublicUpsertObjectOk|BatchResponseSimplePublicUpsertObjectWithErrorsMultiStatus|AnydataDefault {
    // }

    // # + return - returns can be any of following types 
    // # http:Ok (successful operation)
    // # http:DefaultStatusCodeResponse (An error occurred.)
    // resource function post crm/v3/objects/orders/search(@http:Payload PublicObjectSearchRequest payload) returns CollectionResponseWithTotalSimplePublicObjectForwardPagingOk|AnydataDefault {
    // }
}
